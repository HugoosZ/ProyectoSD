
networks:
  trafico-network:
    driver: bridge

volumes:
  db-data:
  redis-data:


services:

  # Servicio de scraping de Waze
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: waze-scraper
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB=waze_events
      - MONGO_USER=waze_user
      - MONGO_PASSWORD=securepassword
      - TARGET_COUNT=10000
      - CITY=santiago
      - COUNTRY=chile
    volumes:
      - ./scraper/src:/app/src
    networks:
      - trafico-network
    restart: unless-stopped
    depends_on:
      - mongo
      - redis

  # Servicio de base de datos MongoDB
  mongo:
    image: mongo:6.0
    container_name: waze-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=securepassword
      - MONGO_INITDB_DATABASE=waze_events
    ports:
      - "27017:27017"
    volumes:
      - db-data:/data/db
      - ./storage/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - trafico-network
    restart: unless-stopped

  # Servicio de cache con Redis
  redis:
    image: redis:7-alpine
    container_name: waze-cache
    
    ports:
      - "6379:6379"    # Puerto estándar (para tus servicios)
    volumes:
      - redis-data:/data
    networks:
      - trafico-network
    restart: unless-stopped
  # Servicio que administra el cache y políticas

  cache-service:
    build:
      context: ./cache-service
    container_name: waze-cache-service
    env_file: redis.env  # Esto debe estar dentro del servicio, no en la raíz
    networks:
      - trafico-network
    restart: unless-stopped


  traffic-generator:
    build:
      context: ./traffic-generator
    container_name: waze-traffic-gen
    networks:
      - trafico-network
    depends_on:
      - mongo
      - redis
    restart: unless-stopped
  